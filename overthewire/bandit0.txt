Host: bandit.labs.overthewire.org
Port: 2220

This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ is disabled and to /proc
  restricted so that users cannot snoop on eachother. Files and directories
  with easily guessable or short names will be periodically deleted! The /tmp
  directory is regularly wiped.
  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few useful tools which you can find
 in the following locations:

    * gef (https://github.com/hugsy/gef) in /opt/gef/
    * pwndbg (https://github.com/pwndbg/pwndbg) in /opt/pwndbg/
    * peda (https://github.com/longld/peda.git) in /opt/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /opt/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)

key:NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL

working dir: /tmp/tmp.eFThgwXEUO > /tmp/shayodit

bandit1: 10.0.1.118

bandit1 = rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi
bandit2 contnt = aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG
bandit3 content = 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe
bandit4 content = lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR
bandit5 content = P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
bandit6 content = z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S
bandit7 content = TESKZC0XvTetK0S9xNwm25STk5iWrBvP
bandit8 content = EN632PlfYiZbn3PhVK3XOGSlNInNE00t
bandit9 content = G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
bandit10 content = 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
bandit11 content = JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
BANDIT12

Letâ€™s find the password for the next level.

bandit12@bandit:~$ ls
data.txt
bandit12@bandit:~$ head data.txt
00000000: 1f8b 0808 d7d2 c55b 0203 6461 7461 322e  .......[..data2.
00000010: 6269 6e00 013c 02c3 fd42 5a68 3931 4159  bin..<...BZh91AY
00000020: 2653 591d aae5 9800 001b ffff de7f 7fff  &SY.............
00000030: bfb7 dfcf 9fff febf f5ad efbf bbdf 7fdb  ................
00000040: f2fd ffdf effa 7fff fbd7 bdff b001 398c  ..............9.
00000050: 1006 8000 0000 0d06 9900 0000 6834 000d  ............h4..
00000060: 01a1 a000 007a 8000 0d00 0006 9a00 d034  .....z.........4
00000070: 0d1a 3234 68d1 e536 a6d4 4000 341a 6200  ..24h..6..@.4.b.
00000080: 0069 a000 0000 0000 d003 d200 681a 0d00  .i..........h...
00000090: 0001 b51a 1a0c 201e a000 6d46 8068 069a  ...... ...mF.h..
bandit12@bandit:~$

First of all, we use the xxd command to do a reverse hex dump and store the file with its original name, data.

After using the file command to fetch the information of data, we know that data is a gzip compressed file.

bandit12@bandit:/tmp/secttp$ cat data.txt | xxd -r > data
bandit12@bandit:/tmp/secttp$ file data
data: gzip compressed data, was "data2.bin", last modified: Tue Oct 16 12:00:23 2018, max compression, from Unix
bandit12@bandit:/tmp/secttp$

We change the suffix of data back to .gz, which means the file would be renamed to data2.gz. Then, we use gzip to decompress the file. Afterward, we use the file command to check the information of data2 again.

bandit12@bandit:/tmp/secttp$ mv data data2.gz
bandit12@bandit:/tmp/secttp$ gzip -d data2.gz
bandit12@bandit:/tmp/secttp$ ls
data2  data.txt
bandit12@bandit:/tmp/secttp$ file data2
data: bzip2 compressed data, block size = 900k

This time, the data2 file is a bzip2 compressed file. We change the suffix of data2 back to .bz, which means the file would be renamed to data3.bz.

bandit12@bandit:/tmp/secttp$ mv data2 data3.bz
bandit12@bandit:/tmp/secttp$ bzip2 -d data3.bz
bandit12@bandit:/tmp/secttp$ ls
data3  data.txt
bandit12@bandit:/tmp/secttp$ file data3
data3: gzip compressed data, was "data4.bin", last modified: Tue Oct 16 12:00:23 2018, max compression, from Unix
bandit12@bandit:/tmp/secttp$

It seems like an execution loop that we have to take the steps of checking the file, modifying the suffix, and then decompressing the file.

bandit12@bandit:/tmp/secttp$ mv data3 data4.gz
bandit12@bandit:/tmp/secttp$ gzip -d data4.gz
bandit12@bandit:/tmp/secttp$ ls
data4  data.txt
bandit12@bandit:/tmp/secttp$ file data4
data4: POSIX tar archive (GNU)bandit12@bandit:/tmp/secttp$ mv data4 data5.tar
bandit12@bandit:/tmp/secttp$ tar -xf data5.tar
bandit12@bandit:/tmp/secttp$ ls
data5.bin  data5.tar  data.txt
bandit12@bandit:/tmp/secttp$ file data5.bin
data5.bin: POSIX tar archive (GNU)bandit12@bandit:/tmp/secttp$ mv data5.bin data6.tar
bandit12@bandit:/tmp/secttp$ tar -xf data6.tar
bandit12@bandit:/tmp/secttp$ ls
data5.tar  data6.bin  data6.tar  data.txt
bandit12@bandit:/tmp/secttp$ file data6.bin
data6.bin: bzip2 compressed data, block size = 900kbandit12@bandit:/tmp/secttp$ mv data6.bin data7.bz
bandit12@bandit:/tmp/secttp$ bzip2 -d data7.bz
bandit12@bandit:/tmp/secttp$ ls
data5.tar  data6.tar  data7  data.txt
bandit12@bandit:/tmp/secttp$ file data7
data7: POSIX tar archive (GNU)bandit12@bandit:/tmp/secttp$ mv data7 data8.tar
bandit12@bandit:/tmp/secttp$ tar -xf data8.tar
bandit12@bandit:/tmp/secttp$ ls
data5.tar  data6.tar  data8.bin  data8.tar  data.txt
bandit12@bandit:/tmp/secttp$ file data8.bin
data8.bin: gzip compressed data, was "data9.bin", last modified: Tue Oct 16 12:00:23 2018, max compression, from Unixbandit12@bandit:/tmp/secttp$ mv data8.bin data9.gz
bandit12@bandit:/tmp/secttp$ gzip -d data9.gz
bandit12@bandit:/tmp/secttp$ ls
data5.tar  data6.tar  data8.tar  data9  data.txt
bandit12@bandit:/tmp/secttp$ file data9
data9: ASCII textbandit12@bandit:/tmp/secttp$ cat data9

BANDIT 12 CONTENT : wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw

BANDIT 13/14 content : fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq
bandit 14 == jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt


BANDIT 15
OpenSSL is a library for secure communication over networks. It implements the
Transport Layer Security (TLS) and Secure Sockets Layer (SSL) cryptographic
protocols that are, for example, used in HTTPS to secure the web traffic.

openssl s_client is the implementation of a simple client that connects
to a server using SSL/TLS.

Solution

Since the task states that the password can be retrieved using SSL encryption,
I connect to the localhost server with the OpenSSL client and send the password
from this level. The server then sends back the password for the next level.

openssl s_client -connect localhost:30001