OWASP JUICE SHOP
admin@juice-sh.op
bender@juice-sh.op
uvogin@juice-sh.op
jim@juice-sh.op

TASK 3
Injection vulnerabilities

first vulnerability we are trying is the login to admin account using sql injection
insert ip to address bar 10.10.55.150
try login as a random user
intercept request with burp
then insert ( ' or 1=1--) in the email field
you should get access to the admin panel

Why does this work?

The character ' will close the brackets in the SQL query

'OR' in a SQL statement will return true if either side of it is true. As 1=1 is always true, the whole statement is true. Thus it will tell the server that the email is valid, and log us into user id 0, which happens to be the administrator account.
    
The -- character is used in SQL to comment out data, any restrictions on the login will no longer work as they are interpreted as a comment. This is like the # and // comment in python and javascript respectively.



quetion2
login to another user account using sql injection

sign in with random data
intercept sign-in request
insert user email and comment out the rest of data
bender@juice-sh.op'--

' = to close brackets in sql
-- = comment out rest of data supplied to the server


task 4
BROKEN AUTH
1.Weak passwd in high priv acct
2. forgotten passwd pages


Q1. Bruteforce admin passwd

We have used SQL Injection to log into the Administrator account but we still don't know the password. Let's try a brute-force attack! We will once again capture a login request, but instead of sending it through the proxy, we will send it to Intruder.

Go to Positions and then select the Clear ยง button. In the password field place two ยง inside the quotes. To clarify, the ยง ยง is not two sperate inputs but rather Burp's implementation of quotations e.g. "".

For the payload, we will be using the best1050.txt from Seclists. (Which can be installed via: apt-get install seclists)

You can load the list from: /usr/share/wordlists/SecLists/Passwords/Common-Credentials/best1050.txt

/home/hybrid/Desktop/tools/SecLists/Passwords/Common-Credentials/best1050.txt

Once the file is loaded into Burp, start the attack. You will want to filter for the request by status.

A failed request will receive a 401 Unauthorized   

Whereas a successful request will return a 200 OK.

the admin panel password is admin123 


Q2. reset jim's password

Believe it or not, the reset password mechanism can also be exploited! When inputted into the email field in the Forgot Password page, Jim's security question is set to "Your eldest siblings middle name?".

In Task 2, we found that Jim might have something to do with Star Trek. Googling "Jim Star Trek" gives us a wiki page for Jame T. Kirk from Star Trek.
Looking through the wiki page we find that he has a brother.
Looks like his brother's middle name is Samuel
Inputting that into the Forgot Password page allows you to successfully change his password.
You can change it to anything you want!



TASK 5 = SENSITIVE DATA EXPOSURE

A web application should store and transmit sensitive data safely and securely. But in some cases, the developer may not correctly protect their sensitive data, making it vulnerable.

Most of the time, data protection is not applied consistently across the web application making certain pages accessible to the public. Other times information is leaked to the public without the knowledge of the developer, making the web application vulnerable to an attack. 


Q1. Access confidential doc
Navigate to the About Us page, and hover over the "Check out our terms of use".
You will see that it links to  http://10.10.55.150/ftp/legal.md. Navigating to that /ftp/ directory reveals that it is exposed to the public!
We will download the acquisitions.md and save it. It looks like there are other files of interest here as well.
After downloading it, navigate to the home page to receive the flag!


Q2. Log into MC SafeSearch's account!
social engineering


Q3.Download backup file.
We will now go back to the  http://10.10.55.150/ftp/ folder and try to download package.json.bak. But it seems we are met with a 403 which says that only .md and .pdf files can be downloaded.

To get around this, we will use a character bypass called "Poison Null Byte". A Poison Null Byte looks like this: %00. 
Note: as we can download it using the url, we will need to encode this into a url encoded format.
The Poison Null Byte will now look like this: %2500. Adding this and then a .md to the end will bypass the 403 error!
that will be http://10.10.55.150/ftp/package.json.bak%2500.md

Why does this work? 

A Poison Null Byte is actually a NULL terminator. By placing a NULL character in the string at a certain byte, the string will tell the server to terminate at that point, nulling the rest of the string.


169940f83378cc420ae4fdeb9c1f73631a2baee6 --- graceful error handling
bfc1e6b4a16579e85e06fee4c36ff8c02fb13795 --- sensitive data exposure


TASK 6 = BAC

Modern-day systems will allow for multiple users to have access to different pages. Administrators most commonly use an administration page to edit, add and remove different elements of a website. You might use these when you are building a website with programs such as Weebly or Wix.  

When Broken Access Control exploits or bugs are found, it will be categorised into one of two types:
Horizontal Privilege Escalation
	Occurs when a user can perform an action or access data of another user with the same level of permissions.
Vertical Privilege Escalation
	Occurs when a user can perform an action or access data of another user with a higher level of permissions.



Q1. Access admin page

First, we are going to open the Debugger on Firefox. 
(Or Sources on Chrome.)
This can be done by navigating to it in the Web Developers menu.
We are then going to refresh the page and look for a javascript file for main-es2015.js
We will then go to that page at: http://10.10.55.150/main-es2015.js

To get this into a format we can read, click the { } button at the bottom  
Now search for the term "admin" 
You will come across a couple of different words containing "admin" but the one we are looking for is "path: administration"

This hints towards a page called "/#/administration" as can be seen by the about path a couple lines below, but going there while not logged in doesn't work. 

As this is an Administrator page, it makes sense that we need to be in the Admin account in order to view it.

A good way to stop users from accessing this is to only load parts of the application that need to be used by them. This stops sensitive information such as an admin page from been leaked or viewed.

HINT: Login to the admin panel before navigating to the path



Q2. View other user basket

Login to the Admin account and click on 'Your Basket'. Make sure Burp is running so you can capture the request!

Forward each request until you see: GET /rest/basket/1 HTTP/1.1


Now, we are going to change the number 1 after /basket/ to 2

It will now show you the basket of UserID 2. You can do this for other UserIDs as well, provided that they have one!



Q3. remove reviews

Navigate to the  http://10.10.55.150/#/administration page again and click the bin icon next to the review with 5 stars!




TASK7 == XSS
XSS or Cross-site scripting is a vulnerability that allows attackers to run javascript in web applications. These are one of the most found bugs in web applications. Their complexity ranges from easy to extremely hard, as each web application parses the queries in a different way. 

There are three major types of XSS attacks:
DOM (Special)
	DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. This type of attack commonly uses the <script></script> HTML tag.
Persistent (Server-side)
	Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts. 
Reflected (Client-side)
	Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitise search data. 


Q1. DOM XSS
We will be using the iframe element with a javascript alert tag: 

<iframe src="javascript:alert(`xss`)"> 

Inputting this into the search bar will trigger the alert.

Note that we are using iframe which is a common HTML element found in many web applications, there are others which also produce the same result. 

This type of XSS is also called XFS (Cross-Frame Scripting), is one of the most common forms of detecting XSS within web applications.

Websites that allow the user to modify the iframe or other DOM elements will most likely be vulnerable to XSS.   

Why does this work?

It is common practice that the search bar will send a request to the server in which it will then send back the related information, but this is where the flaw lies. Without correct input sanitation, we are able to perform an XSS attack against the search bar.


Q2. Stored/persistent XSS
First, login to the admin account.

We are going to navigate to the "Last Login IP" page for this attack.
It should say the last IP Address is 0.0.0.0 or 10.x.x.x 

As it logs the 'last' login IP we will now logout so that it logs the 'new' IP.
Make sure that Burp intercept is on, so it will catch the logout request.

We will then head over to the Headers tab where we will add a new header:
True-Client-IP
	<iframe src="javascript:alert(`xss`)">

Then forward the request to the server!
When signing back into the admin account and navigating to the Last Login IP page again, we will see the XSS alert!

Why do we have to send this Header?

The True-Client-IP  header is similar to the X-Forwarded-For header, both tell the server or proxy what the IP of the client is. Due to there being no sanitation in the header we are able to perform an XSS attack. 



Q3. Reflected XSS

First, we are going to need to be on the right page to perform the reflected XSS!

Login into the admin account and navigate to the 'Order History' page. 

                              

From there you will see a "Truck" icon, clicking on that will bring you to the track result page. You will also see that there is an id paired with the order.   

We will use the iframe XSS, <iframe src="javascript:alert(`xss`)">, in the place of the 5267-f73dcd000abcc353

After submitting the URL, refresh the page and you will then get an alert saying XSS!`

BOOM IT WORKED. WE GOT AN ALERT


Why does this work?

The server will have a lookup table or database (depending on the type of server) for each tracking ID. As the 'id' parameter is not sanitised before it is sent to the server, we are able to perform an XSS attack.  